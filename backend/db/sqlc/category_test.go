package db

import (
	"context"
	"database/sql"
	"proyecto-integrador/util"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func TestCreateCategory(t *testing.T) {
	createRandomCategory(t)
}

func TestGetCategory(t *testing.T) {
	// save created category
	category1 := createRandomCategory(t)
	// query db GetCategory with category id
	category2, err := testQueries.GetCategory(context.Background(), category1.ID)

	// check that error should be nil
	require.NoError(t, err)
	// check not empty
	require.NotEmpty(t, category2)

	// check data fields are equal
	require.Equal(t, category1.ID, category2.ID)
	require.Equal(t, category1.Title, category2.Title)
	require.Equal(t, category1.Description, category2.Description)
	require.Equal(t, category1.ImageUrl, category2.ImageUrl)
	require.WithinDuration(t, category1.CreatedAt, category2.CreatedAt, time.Second)
}

func TestUpdateCategory(t *testing.T) {
	category1 := createRandomCategory(t)

	arg := UpdateCategoryParams{
		ID:          category1.ID,
		Title:       util.RandomString(5),
		Description: util.RandomString(10),
		ImageUrl:    util.RandomString(5),
	}

	category2, err := testQueries.UpdateCategory(context.Background(), arg)

	require.NoError(t, err)
	require.NotEmpty(t, category2)

	require.Equal(t, category1.ID, category2.ID)
	require.Equal(t, arg.Title, category2.Title)
	require.Equal(t, arg.Description, category2.Description)
	require.Equal(t, arg.ImageUrl, category2.ImageUrl)
	require.WithinDuration(t, category1.CreatedAt, category2.CreatedAt, time.Second)
}

func TestDeleteCategory(t *testing.T) {
	category1 := createRandomCategory(t)
	err := testQueries.DeleteCategory(context.Background(), category1.ID)
	require.NoError(t, err)

	// to make sure account is really deleted, call GetAccount and expect an error
	category2, err := testQueries.GetCategory(context.Background(), category1.ID)
	require.Error(t, err)
	require.EqualError(t, err, sql.ErrNoRows.Error())
	require.Empty(t, category2)
}

func TestListCategories(t *testing.T) {
	for i := 0; i < 10; i++ {
		createRandomCategory(t)
	}

	arg := ListCategoriesParams{
		Limit:  5,
		Offset: 5,
	}

	accounts, err := testQueries.ListCategories(context.Background(), arg)
	require.NoError(t, err)
	require.Len(t, accounts, 5)

	for _, account := range accounts {
		require.NotEmpty(t, account)
	}
}

func createRandomCategory(t *testing.T) Category {
	arg := CreateCategoryParams{
		Title:       util.RandomString(10),
		Description: util.RandomString(20),
		ImageUrl:    util.RandomString(40),
	}

	category, err := testQueries.CreateCategory(context.Background(), arg)

	// testify check that the error must be nil, and will automatically fail the test if it's not
	require.NoError(t, err)
	// testify check that the returned category should not be an empty object
	require.NotEmpty(t, category)
	// testify check that the title, description and currency matches with the input arguments
	require.Equal(t, arg.Title, category.Title)
	require.Equal(t, arg.Description, category.Description)
	require.Equal(t, arg.ImageUrl, category.ImageUrl)
	// testify check that category ID and created at is automatically generated by postgres
	require.NotZero(t, category.ID)
	require.NotZero(t, category.CreatedAt)

	return category
}
