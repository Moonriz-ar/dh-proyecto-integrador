// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: city.sql

package db

import (
	"context"
)

const createCity = `-- name: CreateCity :one
INSERT INTO city (name) VALUES ($1) RETURNING id, name, created_at
`

func (q *Queries) CreateCity(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity, name)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getCity = `-- name: GetCity :one
SELECT id, name, created_at FROM city
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCity(ctx context.Context, id int64) (City, error) {
	row := q.db.QueryRowContext(ctx, getCity, id)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listCities = `-- name: ListCities :many
SELECT id, name, created_at FROM city
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCitiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCities(ctx context.Context, arg ListCitiesParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
